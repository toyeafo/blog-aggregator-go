// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow as (insert into feed_follows (id, user_id, feed_id, created_at, updated_at)
values (
    $1,
    $2,
    $3,
    $4,
    $5
)
returning id, user_id, feed_id, created_at, updated_at)

select 
inserted_feed_follow.id, inserted_feed_follow.user_id, inserted_feed_follow.feed_id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, 
users.name as user_name, 
feeds.name as feed_name 
from inserted_feed_follow
inner join feeds on feeds.id = inserted_feed_follow.feed_id
inner join users on users.id = inserted_feed_follow.user_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  sql.NullString
	FeedName  sql.NullString
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
delete from feed_follows
`

func (q *Queries) DeleteFeedFollow(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow)
	return err
}

const getFeedFollow = `-- name: GetFeedFollow :many
select id, user_id, feed_id, created_at, updated_at from feed_follows
`

func (q *Queries) GetFeedFollow(ctx context.Context) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsFollowForUser = `-- name: GetFeedsFollowForUser :many
select 
users.name as user_name, 
feeds.name as feed_name,
feed_follows.id, feed_follows.user_id, feed_follows.feed_id, feed_follows.created_at, feed_follows.updated_at from feed_follows
left join users on users.id = feed_follows.user_id
left join feeds on feeds.user_id = feed_follows.feed_id
where users.name = $1
`

type GetFeedsFollowForUserRow struct {
	UserName  sql.NullString
	FeedName  sql.NullString
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetFeedsFollowForUser(ctx context.Context, name sql.NullString) ([]GetFeedsFollowForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsFollowForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsFollowForUserRow
	for rows.Next() {
		var i GetFeedsFollowForUserRow
		if err := rows.Scan(
			&i.UserName,
			&i.FeedName,
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
